if (length(tt) == 3) {
y = as.character(attr(tt, 'variables')[[2]])
if (length(y) > 1) y = y[-1]
x = as.character(attr(tt, 'variables')[-c(1:2)])
}
expr = parse(text=paste0('lapply(.SD, ', func, ', na.rm=T)'))
grp = paste0(x, collapse = ',')
if (is.null(y)) {
dat = dt[, .N, by = grp]
} else {
vars = y
#todo：替换掉 “, ”?
isMultiGrp = grepl(',', grp) # 分组变量有可能多个
if (isMultiGrp){
dat = dt[, eval(expr), by = grp, .SDcols = vars]
}else{
dat = dt[!is.na(eval(parse(text=grp))), eval(expr), by = eval(parse(text =grp)), .SDcols = vars]
if (names(dat)[[1L]] == 'parse') setnames(dat, 1L, grp)
}
if (N) {
if (isMultiGrp){
dt.n = dt[, .N, by = grp]
} else {
dt.n = dt[!is.na(eval(grp)), .N, by = eval(grp)]
}
dat[, N:=dt.n$N]
}
if (sort) {
if (isMultiGrp) {
setkeyv(dat, unlist(strsplit(grp, split = ',')))
} else {
setkeyv(dat, as.character(grp))
}
}
}
setmeta<-function() {
meta = attr(dt, 'meta')
if (!is.null(meta)) {
meta = meta[nzchar(meta[, 2, with = F]), ]
ns = names(dat)
#ns = ns[ns %in% meta[,1]]
ret = meta[match(ns, meta[, 1, with = F], nomatch = 0), ]
setnames(dat, ret[, 1, with = F], ret[,2, with = F])
}
}
setmeta()
class(dat) = setdiff(class(dat), 'ez.data.frame')
dat
}
table(dat, a66 ~ s5a)
debug(table.ez.data.frame)
table(dat, a66 ~ s5a)
dat
debug(setmeta)
meta
meta
ns
ns
names(dat)
ns
meta[match(ns, meta[, 1, with = F], nomatch = 0), ]
ret
ns
meta[ns, ]
meta
meta=attr(dat, 'meta')
meta['kdkald',]
meta['kdkald', nomatch=0]
meta[c('s41', kdkald'), nomatch=0]
')
meta[c('s41', 'kdkald'), nomatch=0]
table.ez.data.frame<-function(dt, expr, func = 'mean', N = FALSE, sort = TRUE){
tt = terms(expr)
if (length(tt) == 2) {
# x only
x = as.character(attr(tt, 'variables'))
if (length(x) > 1) x = x[-1]
y = NULL
}
if (length(tt) == 3) {
y = as.character(attr(tt, 'variables')[[2]])
if (length(y) > 1) y = y[-1]
x = as.character(attr(tt, 'variables')[-c(1:2)])
}
expr = parse(text=paste0('lapply(.SD, ', func, ', na.rm=T)'))
grp = paste0(x, collapse = ',')
if (is.null(y)) {
dat = dt[, .N, by = grp]
} else {
vars = y
#todo：替换掉 “, ”?
isMultiGrp = grepl(',', grp) # 分组变量有可能多个
if (isMultiGrp){
dat = dt[, eval(expr), by = grp, .SDcols = vars]
}else{
dat = dt[!is.na(eval(parse(text=grp))), eval(expr), by = eval(parse(text =grp)), .SDcols = vars]
if (names(dat)[[1L]] == 'parse') setnames(dat, 1L, grp)
}
if (N) {
if (isMultiGrp){
dt.n = dt[, .N, by = grp]
} else {
dt.n = dt[!is.na(eval(grp)), .N, by = eval(grp)]
}
dat[, N:=dt.n$N]
}
if (sort) {
if (isMultiGrp) {
setkeyv(dat, unlist(strsplit(grp, split = ',')))
} else {
setkeyv(dat, as.character(grp))
}
}
}
setmeta<-function() {
meta = attr(dt, 'meta')
if (!is.null(meta)) {
meta = meta[nzchar(meta[, 2, with = F]), ]
ns = names(dat)
#ns = ns[ns %in% meta[,1]]
#ret = meta[match(ns, meta[, 1, with = F], nomatch = 0), ]
ret = meta[ns, nomatch=0]
setnames(dat, ret[, 1, with = F], ret[,2, with = F])
}
}
setmeta()
class(dat) = setdiff(class(dat), 'ez.data.frame')
dat
}
table(dat, a66 ~ s5a)
dat[[1]]
dat[[2]]
attr(dat[[2]], 'label'
)
aa=attr(dat[[2]], 'labels')
Encoding(aa)='GB2312'
aa
class(aa)
Encoding(names(aa))='GB2312'
aa
table(aa)
table(dat[[2]])
base::table(dat[[2]])
table.ez.data.frame<-function(dt, expr, func = 'mean', N = FALSE, sort = TRUE){
tt = terms(expr)
if (length(tt) == 2) {
# x only
x = as.character(attr(tt, 'variables'))
if (length(x) > 1) x = x[-1]
y = NULL
}
if (length(tt) == 3) {
y = as.character(attr(tt, 'variables')[[2]])
if (length(y) > 1) y = y[-1]
x = as.character(attr(tt, 'variables')[-c(1:2)])
}
expr = parse(text=paste0('lapply(.SD, ', func, ', na.rm=T)'))
grp = paste0(x, collapse = ',')
if (is.null(y)) {
dat = dt[, .N, by = grp]
} else {
vars = y
#todo：替换掉 “, ”?
isMultiGrp = grepl(',', grp) # 分组变量有可能多个
if (isMultiGrp){
dat = dt[, eval(expr), by = grp, .SDcols = vars]
}else{
dat = dt[!is.na(eval(parse(text=grp))), eval(expr), by = eval(parse(text =grp)), .SDcols = vars]
if (names(dat)[[1L]] == 'parse') setnames(dat, 1L, grp)
}
if (N) {
if (isMultiGrp){
dt.n = dt[, .N, by = grp]
} else {
dt.n = dt[!is.na(eval(grp)), .N, by = eval(grp)]
}
dat[, N:=dt.n$N]
}
if (sort) {
if (isMultiGrp) {
setkeyv(dat, unlist(strsplit(grp, split = ',')))
} else {
setkeyv(dat, as.character(grp))
}
}
}
setmeta<-function() {
meta = attr(dt, 'meta')
if (!is.null(meta)) {
meta = meta[nzchar(meta[, 2, with = F]), ]
ns = names(dat)
#ns = ns[ns %in% meta[,1]]
#ret = meta[match(ns, meta[, 1, with = F], nomatch = 0), ]
ret = meta[ns, nomatch=0]
setnames(dat, ret[[1]], ret[[2]])
}
}
setmeta()
class(dat) = setdiff(class(dat), 'ez.data.frame')
dat
}
table(dat, a66 ~ s5a)
match_labels <- function(expr, meta) {
assertthat::noNA(meta)
ret = meta[expr, ]
#ret[is.na(ret[[2]]), ]
ret
}
match_labels(m1$coefficients, attr(dat, 'meta'))
m1$coefficients
meta['a2',]
m1$coefficients
attr(dat, 'meta')
a2= attr(dat, 'meta')
key(a2)
a2[m1$coefficients,]
m1$coefficients
match_labels(names(m1$coefficients), attr(dat, 'meta'))
pander.summary.lm_x <- function(x, caption = attr(x, 'caption'), covariate.labels,
omit, summary = TRUE, add.significance.stars = FALSE, ...){
if (missing(covariate.labels) ) {
model_data = as.character(x$model)[3]
model_data = if (is.na(model_data)) model_data else get(model_data)
if (inherits(model_data, 'ez.data.frame')) {
meta = attr(model_data, 'meta')
covariate.labels = meta
}
}
#  covariate.labels may be a character vector or data.frame ( meta from ez.data.frame or provided as is)
if (!is.null(covariate.labels)) {
if (!is.null(dim(covariate.labels))) {
covariate.labels = match_labels(names(x$coefficients), covariate.labels)
}
}
pander.summary.lm_y(x, caption, covariate.labels, omit, summary, add.significance.stars, ...)
}
pander.summary.lm_y = pander:::pander.summary.lm
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
m1 = lm(a6~a2, dat)
summary(m1)
panoc(m1)
pandoc(m1)
pander::pandoc(m1)
pander:::pandoc(m1)
pander:::pander(m1)
debug(pander.summary.lm_x)
pander:::pander(m1)
model_data
x$model
x$model
m1$model
class(m1$model)
class(m1$call)
m1$call
pander.summary.lm_x <- function(x, caption = attr(x, 'caption'), covariate.labels,
omit, summary = TRUE, add.significance.stars = FALSE, ...){
if (missing(covariate.labels) ) {
model_data = as.character(x$call)[3]
model_data = if (is.na(model_data)) model_data else get(model_data)
if (inherits(model_data, 'ez.data.frame')) {
meta = attr(model_data, 'meta')
covariate.labels = meta
}
}
#  covariate.labels may be a character vector or data.frame ( meta from ez.data.frame or provided as is)
if (!is.null(covariate.labels)) {
if (!is.null(dim(covariate.labels))) {
covariate.labels = match_labels(names(x$coefficients), covariate.labels)
}
}
pander.summary.lm_y(x, caption, covariate.labels, omit, summary, add.significance.stars, ...)
}
pander:::pander(m1)
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
pander:::pander(m1)
match_labels <- function(expr, meta) {
assertthat::noNA(meta)
ret = meta[expr, ]
ret[[2]][is.na(ret[[2]])] = ret[is.na(ret[[2]]), 1, with = F]
ret
}
match_labels(names(m1$coefficients), attr(dat, 'meta'))
pander:::pander(m1)
debug(pander.summary.lm_x)
pander:::pander(m1)
pander:::pander(m1)
dim(covariate.labels)
match_labels(names(x$coefficients), covariate.labels)
names(x$coefficients)
class(x)
summary(m1)
summary(m1)$call
m2 = summary(m1)
m2$coefficients
pander:::pander(m1)
class9x
class(x)
str(x)
x$coefficients
x$call
names(x$coefficients)
rownames(x$coefficients)
pander.summary.lm_x <- function(x, caption = attr(x, 'caption'), covariate.labels,
omit, summary = TRUE, add.significance.stars = FALSE, ...){
if (missing(covariate.labels) ) {
model_data = as.character(x$call)[3]
model_data = if (is.na(model_data)) model_data else get(model_data)
if (inherits(model_data, 'ez.data.frame')) {
meta = attr(model_data, 'meta')
covariate.labels = meta
}
}
#  covariate.labels may be a character vector or data.frame ( meta from ez.data.frame or provided as is)
if (!is.null(covariate.labels)) {
if (!is.null(dim(covariate.labels))) {
covariate.labels = match_labels(rownames(x$coefficients), covariate.labels)
}
}
pander.summary.lm_y(x, caption, covariate.labels, omit, summary, add.significance.stars, ...)
}
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
pander:::pander(m1)
debug(pander.summary.lm_x)
pander:::pander(m1)
covariate.labels
lapply(covariate.labels, class)
pander.summary.lm_x <- function(x, caption = attr(x, 'caption'), covariate.labels,
omit, summary = TRUE, add.significance.stars = FALSE, ...){
if (missing(covariate.labels) ) {
model_data = as.character(x$call)[3]
model_data = if (is.na(model_data)) model_data else get(model_data)
if (inherits(model_data, 'ez.data.frame')) {
meta = attr(model_data, 'meta')
covariate.labels = meta
}
}
#  covariate.labels may be a character vector or data.frame ( meta from ez.data.frame or provided as is)
if (!is.null(covariate.labels)) {
if (!is.null(dim(covariate.labels))) {
covariate.labels = match_labels(rownames(x$coefficients), covariate.labels)[[2]]
}
}
pander.summary.lm_y(x, caption, covariate.labels, omit, summary, add.significance.stars, ...)
}
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
debug(pander.summary.lm_x)
pander:::pander(m1)
match_labels(rownames(x$coefficients), covariate.labels)[[2]]
tbl
?tbl
getwd()
#' library(ezfm)
#' dat = readStata('CGSS2013（居民问卷） 发布版.dta')
library(ezfm)
dat = readStata('CGSS2013（居民问卷） 发布版.dta')
tbl(dat, a66 ~ s5a)
library("ezfm", lib.loc="D:/ToolsStat/R3/library")
detach("package:ezfm", unload=TRUE)
library(ezfm)
tbl(dat, a66 ~ s5a)
tbl(dat, a66 ~ s5a, 'mean')
tbl(dat, a66 ~ s5a, 'max')
tbl(dat, a66 ~ s5a, 'length')
?length
?max
m1 = lm(a6~a2, dat)
pander:::pander(m1)
pander(m1)
pander.summary.lm_y
pander.summary.lm
library(pander)
pander.summary.lm
pander:::pander.summary.lm
pander(m1)
pander(m1)
init_pander <- function(){
#debug(pander.summary.lm_x)
pander.summary.lm_y <<- pander:::pander.summary.lm
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
}
pander(m1)
library(pander)
library(ezfm)
dat = readStata('CGSS2013（居民问卷） 发布版.dta')
huashan::get.path()
setwd('E:/Huashan/Stat/R/Lectures/北大新传')
dat = readStata('CGSS2013（居民问卷） 发布版.dta')
setwd('E:/Huashan/Stat/R/Lectures/北大新传')
dat = readStata('CGSS2013（居民问卷） 发布版.dta')
setwd('E:/Huashan/Stat/R/Lectures/北大新传/data')
dat = readStata('CGSS2013（居民问卷） 发布版.dta')
tbl(dat, a66 ~ s5a)
m1 = lm(a6~a2, dat)
pander(m1)
m1 = lm(a6~a2 + a10, dat)
pander(m1)
tbl(dat, a66 ~ s5a)
tbl(dat, a66 ~ s5a, 'max')
options('ezdfKeepVarName' =  T)
options('ezdfKeepVarName')
options('ezdfKeepVarNamea')
options('ezdfKeepVarName')
options('ezdfKeepVarName' =  F)
options('ezdfKeepVarName')
options('ezdfKeepVarName' =  NULL)
aa=options('ezdfKeepVarName' =  NULL)
isTRUE(aa)
match_labels <- function(expr, meta) {
assertthat::noNA(meta)
ret = meta[expr, ]
ret[[2]][is.na(ret[[2]])] = ret[is.na(ret[[2]]), 1, with = F]
keepVarName = getOptKeepVarname()
if (keepVarName) {
ret[[2]] = paste(ret[[1]], ret[[2]], sep = '\n')
}
ret
}
options('ezdfKeepVarName' =  T)
pander(m1)
pander.summary.lm_x <- function(x, caption = attr(x, 'caption'), covariate.labels,
omit, summary = TRUE, add.significance.stars = FALSE, ...){
if (missing(covariate.labels) ) {
model_data = as.character(x$call)[3]
model_data = if (is.na(model_data)) model_data else get(model_data)
if (inherits(model_data, 'ez.data.frame')) {
meta = attr(model_data, 'meta')
covariate.labels = meta
}
}
#  covariate.labels may be a character vector or data.frame ( meta from ez.data.frame or provided as is)
if (!is.null(covariate.labels)) {
if (!is.null(dim(covariate.labels))) {
covariate.labels = match_labels(rownames(x$coefficients), covariate.labels)[[2]]
}
}
pander.summary.lm_y(x, caption, covariate.labels, omit, summary, add.significance.stars, ...)
}
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
pander(m1)
getOptKeepVarname <- function(){
keepVarName = options('ezdfKeepVarName')
keepVarName = if (isTRUE(keepVarName)) keepVarName else FALSE
keepVarName
}
pander(m1)
getOptKeepVarname()
options('ezdfKeepVarName' =  T)
getOptKeepVarname()
options('ezdfKeepVarName')
getOptKeepVarname()
options('ezdfKeepVarName')
isTRUE(options('ezdfKeepVarName'))
class(options('ezdfKeepVarName'))
unclass(options('ezdfKeepVarName'))
isTRUE(unclass(options('ezdfKeepVarName')))
length(options('ezdfKeepVarName'))
options('ezdfKeepVarName')==T
options('ezdfKeepVarNamea')==T
options('ezdfKeepVarName')==T
getOptKeepVarname <- function(){
keepVarName = getOption('ezdfKeepVarName', default= F)
#keepVarName = if (isTRUE(keepVarName)) keepVarName else FALSE
keepVarName
}
getOptKeepVarname()
pander(m1)
panderOptions('keep.line.breaks', TRUE)
pander(m1)
debug(pandoc.table.return)
pander(m1)
debug(table.expand)
cells
tmp
cells
tmp
length(tmp)
sapply(strsplit(cells, "\n"), cbind)
dim(sapply(strsplit(cells, "\n"), cbind))
strsplit(cells, "\n")
unlist(strsplit(cells, "\n"))
do.call(strsplit(cells, "\n"), cbind)
do.call(cbind, strsplit(cells, "\n"))
do.call(cbind, strsplit(cells, "\n"))
detach(package::pander)
detach('package::pander')
detach('package:pander')
library(pander)
pander(m1)
init_pander <- function(){
pander.summary.lm_y <<- pander:::pander.summary.lm
pkgutils::set_hook('pander', 'pander.summary.lm', pander.summary.lm_x)
}
init_pander
init_pander()
pander(m1)
detach('package:ezfm')
library(ezfm)
pander(m1)
detach('package:pander')
detach('package:ezfm')
library(ezfm)
library(pander)
pander(m1)
rm(pander.summary.lm_x())
rm(pander.summary.lm_x
)
rm(pander.summary.lm_y)
pander.summary.lm_y
ezfm::pander.summary.lm_y
ezfm:::pander.summary.lm_y
rm(aa)
save.image("E:/aaa.RData")
