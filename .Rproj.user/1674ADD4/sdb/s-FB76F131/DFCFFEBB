{
    "contents" : "#' library(ezfm)\n#' dat = readStata('CGSS2013（居民问卷） 发布版.dta')\n#' class(dat)\n#' tbl(dat, a66 ~ s5a)\nreadStata <- function(file) {\n  require(haven)\n  dt = read_dta(file)\n  # 修正数据出现  “Error: `x` and `labels` must be same type”错误的临时解决办法：\n  dt = as.data.table(lapply(dt, unclass), stringsAsFactors = F)\n\n  lbl = sapply(dt, attr, 'label')\n  Encoding(lbl) = 'GB2312'\n  meta = data.frame(var = names(dt), lbl = lbl, stringsAsFactors = F)\n  as.ez(dt, meta)\n}\n\n# data(\"iris\")\n# aa = as.ez(iris, meta = data.frame(names(iris), c('花萼长', '花萼宽', '花瓣长', '花瓣宽', '品种')))\n# class(aa)\n# attr(aa, 'meta')\n# table(aa, ~Species)\nas.ez <- function(dt, meta = NULL) {\n  if (!inherits(dt, 'data.table')) {\n    dt = as.data.table(dt)\n  }\n  if (!is.null(meta)) {\n    if (!inherits(meta, 'data.frame')) stop('meta must be a data.frame')\n    if (ncol(meta) < 2) stop('meta must has at least two columns')\n    meta[, 1] = as.character(meta[, 1])\n    meta[, 2] = as.character(meta[, 2])\n    meta = as.data.table(meta)\n    setkeyv(meta, names(meta)[1])\n    attr(dt, 'meta')<-meta\n  }\n  class(dt)<-union('ez.data.frame', class(dt))\n  dt\n}\n\ntbl<- function(DT, expr, func = 'mean', N = FALSE, sort = TRUE){\n  UseMethod(\"tbl\", DT)\n}\n\ntbl.ez.data.frame<-function(dt, expr, func = 'mean', N = FALSE, sort = TRUE){\n  tt = terms(expr)\n  if (length(tt) == 2) {\n    # x only\n    x = as.character(attr(tt, 'variables'))\n    if (length(x) > 1) x = x[-1]\n    y = NULL\n  }\n  if (length(tt) == 3) {\n    y = as.character(attr(tt, 'variables')[[2]])\n    if (length(y) > 1) y = y[-1]\n    x = as.character(attr(tt, 'variables')[-c(1:2)])\n  }\n\n  expr = parse(text=paste0('lapply(.SD, ', func, ', na.rm=T)'))\n\n  grp = paste0(x, collapse = ',')\n  if (is.null(y)) {\n    dat = dt[, .N, by = grp]\n  } else {\n    vars = y\n\n    #todo：替换掉 “, ”?\n    isMultiGrp = grepl(',', grp) # 分组变量有可能多个\n    if (isMultiGrp){\n      dat = dt[, eval(expr), by = grp, .SDcols = vars]\n    }else{\n      dat = dt[!is.na(eval(parse(text=grp))), eval(expr), by = eval(parse(text =grp)), .SDcols = vars]\n      if (names(dat)[[1L]] == 'parse') setnames(dat, 1L, grp)\n    }\n    if (N) {\n      if (isMultiGrp){\n        dt.n = dt[, .N, by = grp]\n      } else {\n        dt.n = dt[!is.na(eval(grp)), .N, by = eval(grp)]\n      }\n      dat[, N:=dt.n$N]\n    }\n\n    if (sort) {\n      if (isMultiGrp) {\n        setkeyv(dat, unlist(strsplit(grp, split = ',')))\n      } else {\n        setkeyv(dat, as.character(grp))\n      }\n    }\n  }\n\n  setmeta<-function() {\n    meta = attr(dt, 'meta')\n    if (!is.null(meta)) {\n      meta = meta[nzchar(meta[, 2, with = F]), ]\n      ns = names(dat)\n      #ns = ns[ns %in% meta[,1]]\n      #ret = meta[match(ns, meta[, 1, with = F], nomatch = 0), ]\n      ret = meta[ns, nomatch=0]\n      keepVarName = getOptKeepVarname()\n      if (keepVarName) {\n        ret[[2]] = paste(ret[[1]], ret[[2]], sep = '\\n')\n      }\n      setnames(dat, ret[[1]], ret[[2]])\n    }\n  }\n\n  setmeta()\n  class(dat) = setdiff(class(dat), 'ez.data.frame')\n  dat\n}\n\ngetOptKeepVarname <- function(){\n  keepVarName = getOption('ezdfKeepVarName', default= F)\n  keepVarName\n}",
    "created" : 1449850284722.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4246816247",
    "id" : "DFCFFEBB",
    "lastKnownWriteTime" : 1449917592,
    "path" : "E:/Huashan/Stat/R/packages/ezfm/R/ez.R",
    "project_path" : "R/ez.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}